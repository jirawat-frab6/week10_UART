
week10_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb8  08003fb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000074  08004034  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004034  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007888  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ad  00000000  00000000  0002792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00028ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015839  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006014  00000000  00000000  0003f3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000857e9  00000000  00000000  000453c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cabae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  000cac2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dd4 	.word	0x08003dd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003dd4 	.word	0x08003dd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e42:	f000 fc7f 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e46:	f000 f8fb 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4a:	f000 f98d 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e4e:	f000 f961 	bl	8001114 <MX_USART2_UART_Init>
  {
	  /*
	  char temp[] = "HELLO WORLD\r\n please type something to test UART\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t *) temp, strlen(temp), 1000);
	  */
	  print(main_state);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 fa4a 	bl	80012ec <print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart2, (uint8_t*) RXdatabuffer, 32);
 8000e58:	2220      	movs	r2, #32
 8000e5a:	4971      	ldr	r1, [pc, #452]	; (8001020 <main+0x1e4>)
 8000e5c:	4871      	ldr	r0, [pc, #452]	; (8001024 <main+0x1e8>)
 8000e5e:	f001 fd2d 	bl	80028bc <HAL_UART_Receive_IT>

	  int16_t inputchar = UARTRecieveIT();
 8000e62:	f000 fa11 	bl	8001288 <UARTRecieveIT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	  if(inputchar != -1){
 8000e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	f000 80a0 	beq.w	8000fb6 <main+0x17a>
		  switch (state) {
 8000e76:	4b6c      	ldr	r3, [pc, #432]	; (8001028 <main+0x1ec>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d01f      	beq.n	8000ebe <main+0x82>
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	f000 8089 	beq.w	8000f96 <main+0x15a>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f040 8096 	bne.w	8000fb6 <main+0x17a>
			  case main_state:
				  switch (inputchar){
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	2b30      	cmp	r3, #48	; 0x30
 8000e90:	d002      	beq.n	8000e98 <main+0x5c>
 8000e92:	2b31      	cmp	r3, #49	; 0x31
 8000e94:	d007      	beq.n	8000ea6 <main+0x6a>
 8000e96:	e00d      	b.n	8000eb4 <main+0x78>
					  case '0': state = led_state; print(led_state);break;
 8000e98:	4b63      	ldr	r3, [pc, #396]	; (8001028 <main+0x1ec>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	801a      	strh	r2, [r3, #0]
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 fa24 	bl	80012ec <print>
 8000ea4:	e00a      	b.n	8000ebc <main+0x80>
					  case '1': state = button_state; print(button_state);break;
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <main+0x1ec>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	2002      	movs	r0, #2
 8000eae:	f000 fa1d 	bl	80012ec <print>
 8000eb2:	e003      	b.n	8000ebc <main+0x80>
					  default: print(wrong_input);
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f000 fa19 	bl	80012ec <print>
				  }break;
 8000eba:	e07c      	b.n	8000fb6 <main+0x17a>
 8000ebc:	e07b      	b.n	8000fb6 <main+0x17a>
			  case led_state:
				  switch (inputchar){
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	3b61      	subs	r3, #97	; 0x61
 8000ec4:	2b17      	cmp	r3, #23
 8000ec6:	d860      	bhi.n	8000f8a <main+0x14e>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <main+0x94>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000f31 	.word	0x08000f31
 8000ed4:	08000f8b 	.word	0x08000f8b
 8000ed8:	08000f8b 	.word	0x08000f8b
 8000edc:	08000f61 	.word	0x08000f61
 8000ee0:	08000f8b 	.word	0x08000f8b
 8000ee4:	08000f8b 	.word	0x08000f8b
 8000ee8:	08000f8b 	.word	0x08000f8b
 8000eec:	08000f8b 	.word	0x08000f8b
 8000ef0:	08000f8b 	.word	0x08000f8b
 8000ef4:	08000f8b 	.word	0x08000f8b
 8000ef8:	08000f8b 	.word	0x08000f8b
 8000efc:	08000f8b 	.word	0x08000f8b
 8000f00:	08000f8b 	.word	0x08000f8b
 8000f04:	08000f8b 	.word	0x08000f8b
 8000f08:	08000f8b 	.word	0x08000f8b
 8000f0c:	08000f8b 	.word	0x08000f8b
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f8b 	.word	0x08000f8b
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000f8b 	.word	0x08000f8b
 8000f20:	08000f8b 	.word	0x08000f8b
 8000f24:	08000f8b 	.word	0x08000f8b
 8000f28:	08000f8b 	.word	0x08000f8b
 8000f2c:	08000f7d 	.word	0x08000f7d
					  case 'a': led_frequency+=1;print(frequency);break;
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <main+0x1f0>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b3c      	ldr	r3, [pc, #240]	; (800102c <main+0x1f0>)
 8000f3a:	801a      	strh	r2, [r3, #0]
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f9d5 	bl	80012ec <print>
 8000f42:	e027      	b.n	8000f94 <main+0x158>
					  case 's': if(led_frequency){led_frequency -= 1;print(frequency);}break;
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <main+0x1f0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d022      	beq.n	8000f92 <main+0x156>
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <main+0x1f0>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <main+0x1f0>)
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f9c7 	bl	80012ec <print>
 8000f5e:	e018      	b.n	8000f92 <main+0x156>
					  case 'd': led_status = !led_status; print(toggle_led);break;
 8000f60:	4b33      	ldr	r3, [pc, #204]	; (8001030 <main+0x1f4>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <main+0x1f4>)
 8000f72:	801a      	strh	r2, [r3, #0]
 8000f74:	2004      	movs	r0, #4
 8000f76:	f000 f9b9 	bl	80012ec <print>
 8000f7a:	e00b      	b.n	8000f94 <main+0x158>
					  case 'x': state = main_state;print(main_state);break;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <main+0x1ec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f9b2 	bl	80012ec <print>
 8000f88:	e004      	b.n	8000f94 <main+0x158>
					  default: print(wrong_input);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 f9ae 	bl	80012ec <print>
				  }break;
 8000f90:	e011      	b.n	8000fb6 <main+0x17a>
					  case 's': if(led_frequency){led_frequency -= 1;print(frequency);}break;
 8000f92:	bf00      	nop
				  }break;
 8000f94:	e00f      	b.n	8000fb6 <main+0x17a>
			  case button_state:
				  switch (inputchar){
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b78      	cmp	r3, #120	; 0x78
 8000f9c:	d107      	bne.n	8000fae <main+0x172>
					  case 'x': state = main_state;print(main_state);break;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <main+0x1ec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f9a1 	bl	80012ec <print>
 8000faa:	bf00      	nop
					  default: print(wrong_input);
				  }break;
 8000fac:	e002      	b.n	8000fb4 <main+0x178>
					  default: print(wrong_input);
 8000fae:	2005      	movs	r0, #5
 8000fb0:	f000 f99c 	bl	80012ec <print>
				  }break;
 8000fb4:	bf00      	nop
		  }
	  }

	  //LED
	  if(led_status){
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <main+0x1f4>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d029      	beq.n	8001012 <main+0x1d6>
		  if(HAL_GetTick()-timestamp >= 500.0/led_frequency){
 8000fbe:	f000 fc27 	bl	8001810 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <main+0x1f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff faa2 	bl	8000514 <__aeabi_ui2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <main+0x1f0>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff faab 	bl	8000534 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4914      	ldr	r1, [pc, #80]	; (8001038 <main+0x1fc>)
 8000fe8:	f7ff fc38 	bl	800085c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fd8e 	bl	8000b14 <__aeabi_dcmpge>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00e      	beq.n	800101c <main+0x1e0>
			  timestamp = HAL_GetTick();
 8000ffe:	f000 fc07 	bl	8001810 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <main+0x1f8>)
 8001006:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001008:	2120      	movs	r1, #32
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <main+0x200>)
 800100c:	f000 fef3 	bl	8001df6 <HAL_GPIO_TogglePin>
 8001010:	e722      	b.n	8000e58 <main+0x1c>
		  }
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <main+0x200>)
 8001018:	f000 fed4 	bl	8001dc4 <HAL_GPIO_WritePin>
  {
 800101c:	e71c      	b.n	8000e58 <main+0x1c>
 800101e:	bf00      	nop
 8001020:	20000090 	.word	0x20000090
 8001024:	20000108 	.word	0x20000108
 8001028:	200000ee 	.word	0x200000ee
 800102c:	20000000 	.word	0x20000000
 8001030:	200000f0 	.word	0x200000f0
 8001034:	200000f4 	.word	0x200000f4
 8001038:	407f4000 	.word	0x407f4000
 800103c:	40020000 	.word	0x40020000

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fabb 	bl	80035ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xd0>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b0:	2310      	movs	r3, #16
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 feb0 	bl	8001e2c <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d2:	f000 fa11 	bl	80014f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f90a 	bl	800230c <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010fe:	f000 f9fb 	bl	80014f8 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f001 fad0 	bl	80026f0 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f9cf 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000108 	.word	0x20000108
 8001164:	40004400 	.word	0x40004400

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xd4>)
 80011f4:	f000 fde6 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_GPIO_Init+0xd8>)
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_GPIO_Init+0xdc>)
 800120e:	f000 fc3f 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_GPIO_Init+0xd4>)
 800122a:	f000 fc31 	bl	8001a90 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	10210000 	.word	0x10210000
 8001244:	40020800 	.word	0x40020800

08001248 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	sprintf(TXdatabuffer, "Received:[%s]\r\n",RXdatabuffer);
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_UART_RxCpltCallback+0x30>)
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <HAL_UART_RxCpltCallback+0x34>)
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <HAL_UART_RxCpltCallback+0x38>)
 8001256:	f002 f9c1 	bl	80035dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TXdatabuffer, strlen(TXdatabuffer),1000);
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_UART_RxCpltCallback+0x38>)
 800125c:	f7fe ffc0 	bl	80001e0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	4905      	ldr	r1, [pc, #20]	; (8001280 <HAL_UART_RxCpltCallback+0x38>)
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <HAL_UART_RxCpltCallback+0x3c>)
 800126c:	f001 fa8d 	bl	800278a <HAL_UART_Transmit>


}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000090 	.word	0x20000090
 800127c:	08003dec 	.word	0x08003dec
 8001280:	200000c0 	.word	0x200000c0
 8001284:	20000108 	.word	0x20000108

08001288 <UARTRecieveIT>:

int16_t UARTRecieveIT(){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

	static uint32_t dataPos = 0;

	int16_t data = -1;
 800128e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001292:	80fb      	strh	r3, [r7, #6]

	if(huart2.RxXferSize - huart2.RxXferCount != dataPos){
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <UARTRecieveIT+0x58>)
 8001296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001298:	461a      	mov	r2, r3
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <UARTRecieveIT+0x58>)
 800129c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800129e:	b29b      	uxth	r3, r3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <UARTRecieveIT+0x5c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d010      	beq.n	80012ce <UARTRecieveIT+0x46>

		data = RXdatabuffer[dataPos];
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <UARTRecieveIT+0x5c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <UARTRecieveIT+0x60>)
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	80fb      	strh	r3, [r7, #6]

		dataPos = (dataPos+1)%huart2.RxXferSize;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <UARTRecieveIT+0x5c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <UARTRecieveIT+0x58>)
 80012be:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80012c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012c4:	fb02 f201 	mul.w	r2, r2, r1
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <UARTRecieveIT+0x5c>)
 80012cc:	6013      	str	r3, [r2, #0]

	}
	return data;
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000108 	.word	0x20000108
 80012e4:	200000f8 	.word	0x200000f8
 80012e8:	20000090 	.word	0x20000090

080012ec <print>:

void print(uint8_t input){
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	b09d      	sub	sp, #116	; 0x74
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	char temp[100] = "";
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	2260      	movs	r2, #96	; 0x60
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 f961 	bl	80035ca <memset>
	switch (input){
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b05      	cmp	r3, #5
 800130c:	f200 80cc 	bhi.w	80014a8 <print+0x1bc>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <print+0x2c>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001331 	.word	0x08001331
 800131c:	08001355 	.word	0x08001355
 8001320:	08001379 	.word	0x08001379
 8001324:	08001401 	.word	0x08001401
 8001328:	08001415 	.word	0x08001415
 800132c:	0800145d 	.word	0x0800145d
		case main_state: strcat(temp,"==============\r\n0:LED Control\r\n1:button Status\r\n==============\r\n");break;
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff53 	bl	80001e0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4413      	add	r3, r2
 8001344:	4a61      	ldr	r2, [pc, #388]	; (80014cc <print+0x1e0>)
 8001346:	4618      	mov	r0, r3
 8001348:	4611      	mov	r1, r2
 800134a:	2341      	movs	r3, #65	; 0x41
 800134c:	461a      	mov	r2, r3
 800134e:	f002 f931 	bl	80035b4 <memcpy>
 8001352:	e0a9      	b.n	80014a8 <print+0x1bc>
		case led_state: strcat(temp,"==============\r\na:Speed Up 1Hz\r\nb:Speed down 1Hz\r\nd:On/off\r\nx:back\r\n==============\r\n");break;
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff41 	bl	80001e0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4413      	add	r3, r2
 8001368:	4a59      	ldr	r2, [pc, #356]	; (80014d0 <print+0x1e4>)
 800136a:	4618      	mov	r0, r3
 800136c:	4611      	mov	r1, r2
 800136e:	2355      	movs	r3, #85	; 0x55
 8001370:	461a      	mov	r2, r3
 8001372:	f002 f91f 	bl	80035b4 <memcpy>
 8001376:	e097      	b.n	80014a8 <print+0x1bc>
		case button_state: strcat(temp,"==============\r\nx:back\r\n");if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){strcat(temp,"un");}strcat(temp,"press\r\n==============\r\n");break;
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff2f 	bl	80001e0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4413      	add	r3, r2
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <print+0x1e8>)
 800138e:	461d      	mov	r5, r3
 8001390:	4614      	mov	r4, r2
 8001392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001394:	6028      	str	r0, [r5, #0]
 8001396:	6069      	str	r1, [r5, #4]
 8001398:	60aa      	str	r2, [r5, #8]
 800139a:	60eb      	str	r3, [r5, #12]
 800139c:	cc03      	ldmia	r4!, {r0, r1}
 800139e:	6128      	str	r0, [r5, #16]
 80013a0:	6169      	str	r1, [r5, #20]
 80013a2:	7823      	ldrb	r3, [r4, #0]
 80013a4:	762b      	strb	r3, [r5, #24]
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	484b      	ldr	r0, [pc, #300]	; (80014d8 <print+0x1ec>)
 80013ac:	f000 fcf2 	bl	8001d94 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00e      	beq.n	80013d4 <print+0xe8>
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff10 	bl	80001e0 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4413      	add	r3, r2
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <print+0x1f0>)
 80013cc:	8811      	ldrh	r1, [r2, #0]
 80013ce:	7892      	ldrb	r2, [r2, #2]
 80013d0:	8019      	strh	r1, [r3, #0]
 80013d2:	709a      	strb	r2, [r3, #2]
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff01 	bl	80001e0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4413      	add	r3, r2
 80013e8:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <print+0x1f4>)
 80013ea:	461d      	mov	r5, r3
 80013ec:	4614      	mov	r4, r2
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	6028      	str	r0, [r5, #0]
 80013f2:	6069      	str	r1, [r5, #4]
 80013f4:	60aa      	str	r2, [r5, #8]
 80013f6:	60eb      	str	r3, [r5, #12]
 80013f8:	cc03      	ldmia	r4!, {r0, r1}
 80013fa:	6128      	str	r0, [r5, #16]
 80013fc:	6169      	str	r1, [r5, #20]
 80013fe:	e053      	b.n	80014a8 <print+0x1bc>
		case frequency: sprintf(temp,"==============\r\nFrequency: %d Hz\r\n==============\r\n",led_frequency);break;
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <print+0x1f8>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4937      	ldr	r1, [pc, #220]	; (80014e8 <print+0x1fc>)
 800140c:	4618      	mov	r0, r3
 800140e:	f002 f8e5 	bl	80035dc <siprintf>
 8001412:	e049      	b.n	80014a8 <print+0x1bc>
		case toggle_led: strcat(temp,"==============\r\ntoggle_led\r\n==============\r\n");break;
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fee1 	bl	80001e0 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4413      	add	r3, r2
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <print+0x200>)
 800142a:	4614      	mov	r4, r2
 800142c:	469c      	mov	ip, r3
 800142e:	f104 0e20 	add.w	lr, r4, #32
 8001432:	4665      	mov	r5, ip
 8001434:	4626      	mov	r6, r4
 8001436:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001438:	6028      	str	r0, [r5, #0]
 800143a:	6069      	str	r1, [r5, #4]
 800143c:	60aa      	str	r2, [r5, #8]
 800143e:	60eb      	str	r3, [r5, #12]
 8001440:	3410      	adds	r4, #16
 8001442:	f10c 0c10 	add.w	ip, ip, #16
 8001446:	4574      	cmp	r4, lr
 8001448:	d1f3      	bne.n	8001432 <print+0x146>
 800144a:	4665      	mov	r5, ip
 800144c:	4623      	mov	r3, r4
 800144e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001450:	6028      	str	r0, [r5, #0]
 8001452:	6069      	str	r1, [r5, #4]
 8001454:	60aa      	str	r2, [r5, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	732b      	strb	r3, [r5, #12]
 800145a:	e025      	b.n	80014a8 <print+0x1bc>
		case wrong_input: strcat(temp,"==============\r\nWrong Input!\r\n==============\r\n");break;
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe febd 	bl	80001e0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4413      	add	r3, r2
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <print+0x204>)
 8001472:	4615      	mov	r5, r2
 8001474:	469c      	mov	ip, r3
 8001476:	f105 0e20 	add.w	lr, r5, #32
 800147a:	4664      	mov	r4, ip
 800147c:	462e      	mov	r6, r5
 800147e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001480:	6020      	str	r0, [r4, #0]
 8001482:	6061      	str	r1, [r4, #4]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	60e3      	str	r3, [r4, #12]
 8001488:	3510      	adds	r5, #16
 800148a:	f10c 0c10 	add.w	ip, ip, #16
 800148e:	4575      	cmp	r5, lr
 8001490:	d1f3      	bne.n	800147a <print+0x18e>
 8001492:	4664      	mov	r4, ip
 8001494:	462b      	mov	r3, r5
 8001496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001498:	6020      	str	r0, [r4, #0]
 800149a:	6061      	str	r1, [r4, #4]
 800149c:	60a2      	str	r2, [r4, #8]
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	81a2      	strh	r2, [r4, #12]
 80014a4:	73a3      	strb	r3, [r4, #14]
 80014a6:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe fe97 	bl	80001e0 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f107 010c 	add.w	r1, r7, #12
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <print+0x208>)
 80014c0:	f001 f963 	bl	800278a <HAL_UART_Transmit>
}
 80014c4:	bf00      	nop
 80014c6:	3774      	adds	r7, #116	; 0x74
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014cc:	08003dfc 	.word	0x08003dfc
 80014d0:	08003e40 	.word	0x08003e40
 80014d4:	08003e98 	.word	0x08003e98
 80014d8:	40020800 	.word	0x40020800
 80014dc:	08003eb4 	.word	0x08003eb4
 80014e0:	08003eb8 	.word	0x08003eb8
 80014e4:	20000000 	.word	0x20000000
 80014e8:	08003ed0 	.word	0x08003ed0
 80014ec:	08003f04 	.word	0x08003f04
 80014f0:	08003f34 	.word	0x08003f34
 80014f4:	20000108 	.word	0x20000108

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fe:	e7fe      	b.n	80014fe <Error_Handler+0x6>

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153e:	2007      	movs	r0, #7
 8001540:	f000 fa42 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_UART_MspInit+0x94>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d133      	bne.n	80015da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_UART_MspInit+0x98>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x98>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_UART_MspInit+0x98>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_UART_MspInit+0x98>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_UART_MspInit+0x98>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_UART_MspInit+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_UART_MspInit+0x9c>)
 80015c6:	f000 fa63 	bl	8001a90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2026      	movs	r0, #38	; 0x26
 80015d0:	f000 fa05 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d4:	2026      	movs	r0, #38	; 0x26
 80015d6:	f000 fa1e 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f8d4 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USART2_IRQHandler+0x10>)
 800164a:	f001 f98d 	bl	8002968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000108 	.word	0x20000108

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f001 ff6a 	bl	8003560 <__errno>
 800168c:	4602      	mov	r2, r0
 800168e:	230c      	movs	r3, #12
 8001690:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20020000 	.word	0x20020000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	200000fc 	.word	0x200000fc
 80016c0:	20000150 	.word	0x20000150

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <SystemInit+0x28>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <SystemInit+0x28>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SystemInit+0x28>)
 80016da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016de:	609a      	str	r2, [r3, #8]
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016f6:	e003      	b.n	8001700 <LoopCopyDataInit>

080016f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016fe:	3104      	adds	r1, #4

08001700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001708:	d3f6      	bcc.n	80016f8 <CopyDataInit>
  ldr  r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800170c:	e002      	b.n	8001714 <LoopFillZerobss>

0800170e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800170e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001710:	f842 3b04 	str.w	r3, [r2], #4

08001714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001718:	d3f9      	bcc.n	800170e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800171a:	f7ff ffd3 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f001 ff25 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fb8b 	bl	8000e3c <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800172c:	08003fc0 	.word	0x08003fc0
  ldr  r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001734:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001738:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800173c:	20000150 	.word	0x20000150

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f92b 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fec2 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f943 	bl	8001a32 <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f90b 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000004 	.word	0x20000004
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20000148 	.word	0x20000148

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000148 	.word	0x20000148

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff3e 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff31 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa2 	bl	8001984 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e00c      	b.n	8001a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e159      	b.n	8001d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8148 	bne.w	8001d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0xfc>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a2 	beq.w	8001d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x202>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x1fe>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2f4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x1fa>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x2f8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x1f6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_GPIO_Init+0x2fc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x1f2>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd6:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x300>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f aea2 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3724      	adds	r7, #36	; 0x24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	401a      	ands	r2, r3
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d104      	bne.n	8001e1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	041a      	lsls	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e25b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d075      	beq.n	8001f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4a:	4ba3      	ldr	r3, [pc, #652]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4ba0      	ldr	r3, [pc, #640]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e62:	4b9d      	ldr	r3, [pc, #628]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b99      	ldr	r3, [pc, #612]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05b      	beq.n	8001f34 <HAL_RCC_OscConfig+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e236      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x74>
 8001e92:	4b91      	ldr	r3, [pc, #580]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a87      	ldr	r2, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ec4:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fc94 	bl	8001810 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fc90 	bl	8001810 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1fb      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xc0>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fc80 	bl	8001810 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fc7c 	bl	8001810 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1e7      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0xe8>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1bb      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4952      	ldr	r1, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fc35 	bl	8001810 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff fc31 	bl	8001810 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e19c      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4940      	ldr	r1, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc14 	bl	8001810 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff fc10 	bl	8001810 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e17b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff fbf4 	bl	8001810 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fbf0 	bl	8001810 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e15b      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x200>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fbdd 	bl	8001810 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7ff fbd9 	bl	8001810 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e144      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a0 	beq.w	80021c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb9f 	bl	8001810 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e011      	b.n	80020fa <HAL_RCC_OscConfig+0x2ce>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
 80020e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7ff fb92 	bl	8001810 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0fd      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x4d4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x2f0>
 800210e:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a7c      	ldr	r2, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e01c      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002124:	4b77      	ldr	r3, [pc, #476]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a76      	ldr	r2, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a73      	ldr	r2, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e00b      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800213e:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a70      	ldr	r2, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b6e      	ldr	r3, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a6d      	ldr	r2, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d015      	beq.n	800218a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff fb57 	bl	8001810 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff fb53 	bl	8001810 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0bc      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCC_OscConfig+0x33a>
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb41 	bl	8001810 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fb3d 	bl	8001810 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0a6      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b52      	ldr	r3, [pc, #328]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8092 	beq.w	80022f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d05c      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d141      	bne.n	8002268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb11 	bl	8001810 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff fb0d 	bl	8001810 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e078      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4933      	ldr	r1, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fae6 	bl	8001810 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fae2 	bl	8001810 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e04d      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x41c>
 8002266:	e045      	b.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x4dc>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff facf 	bl	8001810 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff facb 	bl	8001810 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e036      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x44a>
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e029      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_RCC_OscConfig+0x4d8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d115      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000
 8002304:	40023800 	.word	0x40023800
 8002308:	42470060 	.word	0x42470060

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7ff fa08 	bl	8001810 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff fa04 	bl	8001810 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	fa21 f303 	lsr.w	r3, r1, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f968 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08003f64 	.word	0x08003f64
 80024d0:	20000004 	.word	0x20000004
 80024d4:	20000008 	.word	0x20000008

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d007      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x32>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d008      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x38>
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80b4 	bne.w	800266c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002506:	60bb      	str	r3, [r7, #8]
       break;
 8002508:	e0b3      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250a:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800250c:	60bb      	str	r3, [r7, #8]
      break;
 800250e:	e0b0      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	4b5a      	ldr	r3, [pc, #360]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04a      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	ea03 0501 	and.w	r5, r3, r1
 800253c:	ea04 0602 	and.w	r6, r4, r2
 8002540:	4629      	mov	r1, r5
 8002542:	4632      	mov	r2, r6
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	f04f 0400 	mov.w	r4, #0
 800254c:	0154      	lsls	r4, r2, #5
 800254e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002552:	014b      	lsls	r3, r1, #5
 8002554:	4619      	mov	r1, r3
 8002556:	4622      	mov	r2, r4
 8002558:	1b49      	subs	r1, r1, r5
 800255a:	eb62 0206 	sbc.w	r2, r2, r6
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	f04f 0400 	mov.w	r4, #0
 8002566:	0194      	lsls	r4, r2, #6
 8002568:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800256c:	018b      	lsls	r3, r1, #6
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	eb64 0402 	sbc.w	r4, r4, r2
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	00e2      	lsls	r2, r4, #3
 800257e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002582:	00d9      	lsls	r1, r3, #3
 8002584:	460b      	mov	r3, r1
 8002586:	4614      	mov	r4, r2
 8002588:	195b      	adds	r3, r3, r5
 800258a:	eb44 0406 	adc.w	r4, r4, r6
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	0262      	lsls	r2, r4, #9
 8002598:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800259c:	0259      	lsls	r1, r3, #9
 800259e:	460b      	mov	r3, r1
 80025a0:	4614      	mov	r4, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	4621      	mov	r1, r4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	f7fe fac4 	bl	8000b3c <__aeabi_uldivmod>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e049      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	ea03 0501 	and.w	r5, r3, r1
 80025d2:	ea04 0602 	and.w	r6, r4, r2
 80025d6:	4629      	mov	r1, r5
 80025d8:	4632      	mov	r2, r6
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	0154      	lsls	r4, r2, #5
 80025e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e8:	014b      	lsls	r3, r1, #5
 80025ea:	4619      	mov	r1, r3
 80025ec:	4622      	mov	r2, r4
 80025ee:	1b49      	subs	r1, r1, r5
 80025f0:	eb62 0206 	sbc.w	r2, r2, r6
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	0194      	lsls	r4, r2, #6
 80025fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	1a5b      	subs	r3, r3, r1
 8002606:	eb64 0402 	sbc.w	r4, r4, r2
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	00e2      	lsls	r2, r4, #3
 8002614:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002618:	00d9      	lsls	r1, r3, #3
 800261a:	460b      	mov	r3, r1
 800261c:	4614      	mov	r4, r2
 800261e:	195b      	adds	r3, r3, r5
 8002620:	eb44 0406 	adc.w	r4, r4, r6
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	02a2      	lsls	r2, r4, #10
 800262e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002632:	0299      	lsls	r1, r3, #10
 8002634:	460b      	mov	r3, r1
 8002636:	4614      	mov	r4, r2
 8002638:	4618      	mov	r0, r3
 800263a:	4621      	mov	r1, r4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	461a      	mov	r2, r3
 8002644:	4623      	mov	r3, r4
 8002646:	f7fe fa79 	bl	8000b3c <__aeabi_uldivmod>
 800264a:	4603      	mov	r3, r0
 800264c:	460c      	mov	r4, r1
 800264e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	60bb      	str	r3, [r7, #8]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800266e:	60bb      	str	r3, [r7, #8]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	68bb      	ldr	r3, [r7, #8]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08003f74 	.word	0x08003f74

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffdc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d0:	4601      	mov	r1, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0b5b      	lsrs	r3, r3, #13
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08003f74 	.word	0x08003f74

080026f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e03f      	b.n	8002782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe ff1a 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fb97 	bl	8002e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af02      	add	r7, sp, #8
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	f040 8083 	bne.w	80028b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Transmit+0x2e>
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e07b      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Transmit+0x40>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e074      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027e0:	f7ff f816 	bl	8001810 <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80027fa:	e042      	b.n	8002882 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d122      	bne.n	800285a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f9b6 	bl	8002b90 <UART_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e042      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002840:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3302      	adds	r3, #2
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	e017      	b.n	8002882 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	e013      	b.n	8002882 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f993 	bl	8002b90 <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e01f      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	60ba      	str	r2, [r7, #8]
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1b7      	bne.n	80027fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f97a 	bl	8002b90 <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e006      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d140      	bne.n	8002958 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_UART_Receive_IT+0x26>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e039      	b.n	800295a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Receive_IT+0x38>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e032      	b.n	800295a <HAL_UART_Receive_IT+0x9e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2222      	movs	r2, #34	; 0x22
 8002918:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002932:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_UART_IRQHandler+0x52>
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f9d6 	bl	8002d64 <UART_Receive_IT>
      return;
 80029b8:	e0d1      	b.n	8002b5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80b0 	beq.w	8002b22 <HAL_UART_IRQHandler+0x1ba>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_UART_IRQHandler+0x70>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80a5 	beq.w	8002b22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_UART_IRQHandler+0x90>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_UART_IRQHandler+0xb0>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_UART_IRQHandler+0xd0>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00f      	beq.n	8002a62 <HAL_UART_IRQHandler+0xfa>
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_UART_IRQHandler+0xee>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	f043 0208 	orr.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d078      	beq.n	8002b5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_UART_IRQHandler+0x11c>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f970 	bl	8002d64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_UART_IRQHandler+0x144>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d031      	beq.n	8002b10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8b9 	bl	8002c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d123      	bne.n	8002b08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <HAL_UART_IRQHandler+0x1fc>)
 8002ade:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ffb0 	bl	8001a4a <HAL_DMA_Abort_IT>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afa:	4610      	mov	r0, r2
 8002afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afe:	e00e      	b.n	8002b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f83b 	bl	8002b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b06:	e00a      	b.n	8002b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f837 	bl	8002b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0e:	e006      	b.n	8002b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f833 	bl	8002b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b1c:	e01e      	b.n	8002b5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1e:	bf00      	nop
    return;
 8002b20:	e01c      	b.n	8002b5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1d6>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8a6 	bl	8002c88 <UART_Transmit_IT>
    return;
 8002b3c:	e00f      	b.n	8002b5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_UART_IRQHandler+0x1f6>
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8ee 	bl	8002d34 <UART_EndTransmit_IT>
    return;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b5c:	bf00      	nop
  }
}
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08002c61 	.word	0x08002c61

08002b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba0:	e02c      	b.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d028      	beq.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb0:	f7fe fe2e 	bl	8001810 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d21d      	bcs.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e00f      	b.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d0c3      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff7e 	bl	8002b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d144      	bne.n	8002d26 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d11a      	bne.n	8002cdc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]
 8002cce:	e00e      	b.n	8002cee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e008      	b.n	8002cee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	1c59      	adds	r1, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6211      	str	r1, [r2, #32]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff07 	bl	8002b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b22      	cmp	r3, #34	; 0x22
 8002d76:	d171      	bne.n	8002e5c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d123      	bne.n	8002dca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10e      	bne.n	8002dae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
 8002dac:	e029      	b.n	8002e02 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc8:	e01b      	b.n	8002e02 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6858      	ldr	r0, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	1c59      	adds	r1, r3, #1
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6291      	str	r1, [r2, #40]	; 0x28
 8002de2:	b2c2      	uxtb	r2, r0
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e00c      	b.n	8002e02 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	1c58      	adds	r0, r3, #1
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	6288      	str	r0, [r1, #40]	; 0x28
 8002dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d120      	bne.n	8002e58 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0220 	bic.w	r2, r2, #32
 8002e24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f9fa 	bl	8001248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e002      	b.n	8002e5e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002eaa:	f023 030c 	bic.w	r3, r3, #12
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed6:	f040 818b 	bne.w	80031f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4ac1      	ldr	r2, [pc, #772]	; (80031e4 <UART_SetConfig+0x37c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x88>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4abf      	ldr	r2, [pc, #764]	; (80031e8 <UART_SetConfig+0x380>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	f040 80bd 	bne.w	800306a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7ff fbea 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8002ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	461d      	mov	r5, r3
 8002efa:	f04f 0600 	mov.w	r6, #0
 8002efe:	46a8      	mov	r8, r5
 8002f00:	46b1      	mov	r9, r6
 8002f02:	eb18 0308 	adds.w	r3, r8, r8
 8002f06:	eb49 0409 	adc.w	r4, r9, r9
 8002f0a:	4698      	mov	r8, r3
 8002f0c:	46a1      	mov	r9, r4
 8002f0e:	eb18 0805 	adds.w	r8, r8, r5
 8002f12:	eb49 0906 	adc.w	r9, r9, r6
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f2a:	4688      	mov	r8, r1
 8002f2c:	4691      	mov	r9, r2
 8002f2e:	eb18 0005 	adds.w	r0, r8, r5
 8002f32:	eb49 0106 	adc.w	r1, r9, r6
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	196b      	adds	r3, r5, r5
 8002f42:	eb46 0406 	adc.w	r4, r6, r6
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	f7fd fdf7 	bl	8000b3c <__aeabi_uldivmod>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	461a      	mov	r2, r3
 8002f54:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <UART_SetConfig+0x384>)
 8002f56:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	461d      	mov	r5, r3
 8002f64:	f04f 0600 	mov.w	r6, #0
 8002f68:	46a9      	mov	r9, r5
 8002f6a:	46b2      	mov	sl, r6
 8002f6c:	eb19 0309 	adds.w	r3, r9, r9
 8002f70:	eb4a 040a 	adc.w	r4, sl, sl
 8002f74:	4699      	mov	r9, r3
 8002f76:	46a2      	mov	sl, r4
 8002f78:	eb19 0905 	adds.w	r9, r9, r5
 8002f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f94:	4689      	mov	r9, r1
 8002f96:	4692      	mov	sl, r2
 8002f98:	eb19 0005 	adds.w	r0, r9, r5
 8002f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	f04f 0600 	mov.w	r6, #0
 8002faa:	196b      	adds	r3, r5, r5
 8002fac:	eb46 0406 	adc.w	r4, r6, r6
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	f7fd fdc2 	bl	8000b3c <__aeabi_uldivmod>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <UART_SetConfig+0x384>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	; 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3332      	adds	r3, #50	; 0x32
 8002fd2:	4a86      	ldr	r2, [pc, #536]	; (80031ec <UART_SetConfig+0x384>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fe0:	4498      	add	r8, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	46a9      	mov	r9, r5
 8002fec:	46b2      	mov	sl, r6
 8002fee:	eb19 0309 	adds.w	r3, r9, r9
 8002ff2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ff6:	4699      	mov	r9, r3
 8002ff8:	46a2      	mov	sl, r4
 8002ffa:	eb19 0905 	adds.w	r9, r9, r5
 8002ffe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800300e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003016:	4689      	mov	r9, r1
 8003018:	4692      	mov	sl, r2
 800301a:	eb19 0005 	adds.w	r0, r9, r5
 800301e:	eb4a 0106 	adc.w	r1, sl, r6
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	461d      	mov	r5, r3
 8003028:	f04f 0600 	mov.w	r6, #0
 800302c:	196b      	adds	r3, r5, r5
 800302e:	eb46 0406 	adc.w	r4, r6, r6
 8003032:	461a      	mov	r2, r3
 8003034:	4623      	mov	r3, r4
 8003036:	f7fd fd81 	bl	8000b3c <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	461a      	mov	r2, r3
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <UART_SetConfig+0x384>)
 8003042:	fba3 1302 	umull	r1, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2164      	movs	r1, #100	; 0x64
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <UART_SetConfig+0x384>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	f003 0207 	and.w	r2, r3, #7
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4442      	add	r2, r8
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e26f      	b.n	800354a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800306a:	f7ff fb19 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 800306e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	461d      	mov	r5, r3
 8003074:	f04f 0600 	mov.w	r6, #0
 8003078:	46a8      	mov	r8, r5
 800307a:	46b1      	mov	r9, r6
 800307c:	eb18 0308 	adds.w	r3, r8, r8
 8003080:	eb49 0409 	adc.w	r4, r9, r9
 8003084:	4698      	mov	r8, r3
 8003086:	46a1      	mov	r9, r4
 8003088:	eb18 0805 	adds.w	r8, r8, r5
 800308c:	eb49 0906 	adc.w	r9, r9, r6
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800309c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030a4:	4688      	mov	r8, r1
 80030a6:	4691      	mov	r9, r2
 80030a8:	eb18 0005 	adds.w	r0, r8, r5
 80030ac:	eb49 0106 	adc.w	r1, r9, r6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	461d      	mov	r5, r3
 80030b6:	f04f 0600 	mov.w	r6, #0
 80030ba:	196b      	adds	r3, r5, r5
 80030bc:	eb46 0406 	adc.w	r4, r6, r6
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f7fd fd3a 	bl	8000b3c <__aeabi_uldivmod>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <UART_SetConfig+0x384>)
 80030d0:	fba3 2302 	umull	r2, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	461d      	mov	r5, r3
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	46a9      	mov	r9, r5
 80030e4:	46b2      	mov	sl, r6
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 0905 	adds.w	r9, r9, r5
 80030f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb19 0005 	adds.w	r0, r9, r5
 8003116:	eb4a 0106 	adc.w	r1, sl, r6
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	461d      	mov	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	196b      	adds	r3, r5, r5
 8003126:	eb46 0406 	adc.w	r4, r6, r6
 800312a:	461a      	mov	r2, r3
 800312c:	4623      	mov	r3, r4
 800312e:	f7fd fd05 	bl	8000b3c <__aeabi_uldivmod>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	461a      	mov	r2, r3
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <UART_SetConfig+0x384>)
 800313a:	fba3 1302 	umull	r1, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2164      	movs	r1, #100	; 0x64
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	3332      	adds	r3, #50	; 0x32
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <UART_SetConfig+0x384>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800315a:	4498      	add	r8, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	461d      	mov	r5, r3
 8003160:	f04f 0600 	mov.w	r6, #0
 8003164:	46a9      	mov	r9, r5
 8003166:	46b2      	mov	sl, r6
 8003168:	eb19 0309 	adds.w	r3, r9, r9
 800316c:	eb4a 040a 	adc.w	r4, sl, sl
 8003170:	4699      	mov	r9, r3
 8003172:	46a2      	mov	sl, r4
 8003174:	eb19 0905 	adds.w	r9, r9, r5
 8003178:	eb4a 0a06 	adc.w	sl, sl, r6
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800318c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003190:	4689      	mov	r9, r1
 8003192:	4692      	mov	sl, r2
 8003194:	eb19 0005 	adds.w	r0, r9, r5
 8003198:	eb4a 0106 	adc.w	r1, sl, r6
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	461d      	mov	r5, r3
 80031a2:	f04f 0600 	mov.w	r6, #0
 80031a6:	196b      	adds	r3, r5, r5
 80031a8:	eb46 0406 	adc.w	r4, r6, r6
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	f7fd fcc4 	bl	8000b3c <__aeabi_uldivmod>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <UART_SetConfig+0x384>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	3332      	adds	r3, #50	; 0x32
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <UART_SetConfig+0x384>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4442      	add	r2, r8
 80031e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031e2:	e1b2      	b.n	800354a <UART_SetConfig+0x6e2>
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4ad7      	ldr	r2, [pc, #860]	; (8003554 <UART_SetConfig+0x6ec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d005      	beq.n	8003206 <UART_SetConfig+0x39e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4ad6      	ldr	r2, [pc, #856]	; (8003558 <UART_SetConfig+0x6f0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f040 80d1 	bne.w	80033a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003206:	f7ff fa5f 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 800320a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	469a      	mov	sl, r3
 8003210:	f04f 0b00 	mov.w	fp, #0
 8003214:	46d0      	mov	r8, sl
 8003216:	46d9      	mov	r9, fp
 8003218:	eb18 0308 	adds.w	r3, r8, r8
 800321c:	eb49 0409 	adc.w	r4, r9, r9
 8003220:	4698      	mov	r8, r3
 8003222:	46a1      	mov	r9, r4
 8003224:	eb18 080a 	adds.w	r8, r8, sl
 8003228:	eb49 090b 	adc.w	r9, r9, fp
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003238:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800323c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003240:	4688      	mov	r8, r1
 8003242:	4691      	mov	r9, r2
 8003244:	eb1a 0508 	adds.w	r5, sl, r8
 8003248:	eb4b 0609 	adc.w	r6, fp, r9
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4619      	mov	r1, r3
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	0094      	lsls	r4, r2, #2
 8003260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003264:	008b      	lsls	r3, r1, #2
 8003266:	461a      	mov	r2, r3
 8003268:	4623      	mov	r3, r4
 800326a:	4628      	mov	r0, r5
 800326c:	4631      	mov	r1, r6
 800326e:	f7fd fc65 	bl	8000b3c <__aeabi_uldivmod>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	461a      	mov	r2, r3
 8003278:	4bb8      	ldr	r3, [pc, #736]	; (800355c <UART_SetConfig+0x6f4>)
 800327a:	fba3 2302 	umull	r2, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	469b      	mov	fp, r3
 8003288:	f04f 0c00 	mov.w	ip, #0
 800328c:	46d9      	mov	r9, fp
 800328e:	46e2      	mov	sl, ip
 8003290:	eb19 0309 	adds.w	r3, r9, r9
 8003294:	eb4a 040a 	adc.w	r4, sl, sl
 8003298:	4699      	mov	r9, r3
 800329a:	46a2      	mov	sl, r4
 800329c:	eb19 090b 	adds.w	r9, r9, fp
 80032a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b8:	4689      	mov	r9, r1
 80032ba:	4692      	mov	sl, r2
 80032bc:	eb1b 0509 	adds.w	r5, fp, r9
 80032c0:	eb4c 060a 	adc.w	r6, ip, sl
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0094      	lsls	r4, r2, #2
 80032d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	4631      	mov	r1, r6
 80032e6:	f7fd fc29 	bl	8000b3c <__aeabi_uldivmod>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b9a      	ldr	r3, [pc, #616]	; (800355c <UART_SetConfig+0x6f4>)
 80032f2:	fba3 1302 	umull	r1, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2164      	movs	r1, #100	; 0x64
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	3332      	adds	r3, #50	; 0x32
 8003304:	4a95      	ldr	r2, [pc, #596]	; (800355c <UART_SetConfig+0x6f4>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	4498      	add	r8, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	469b      	mov	fp, r3
 8003316:	f04f 0c00 	mov.w	ip, #0
 800331a:	46d9      	mov	r9, fp
 800331c:	46e2      	mov	sl, ip
 800331e:	eb19 0309 	adds.w	r3, r9, r9
 8003322:	eb4a 040a 	adc.w	r4, sl, sl
 8003326:	4699      	mov	r9, r3
 8003328:	46a2      	mov	sl, r4
 800332a:	eb19 090b 	adds.w	r9, r9, fp
 800332e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003346:	4689      	mov	r9, r1
 8003348:	4692      	mov	sl, r2
 800334a:	eb1b 0509 	adds.w	r5, fp, r9
 800334e:	eb4c 060a 	adc.w	r6, ip, sl
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	0094      	lsls	r4, r2, #2
 8003366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	4628      	mov	r0, r5
 8003372:	4631      	mov	r1, r6
 8003374:	f7fd fbe2 	bl	8000b3c <__aeabi_uldivmod>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	461a      	mov	r2, r3
 800337e:	4b77      	ldr	r3, [pc, #476]	; (800355c <UART_SetConfig+0x6f4>)
 8003380:	fba3 1302 	umull	r1, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2164      	movs	r1, #100	; 0x64
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	; 0x32
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <UART_SetConfig+0x6f4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4442      	add	r2, r8
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e0d0      	b.n	800354a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7ff f97a 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	469a      	mov	sl, r3
 80033b2:	f04f 0b00 	mov.w	fp, #0
 80033b6:	46d0      	mov	r8, sl
 80033b8:	46d9      	mov	r9, fp
 80033ba:	eb18 0308 	adds.w	r3, r8, r8
 80033be:	eb49 0409 	adc.w	r4, r9, r9
 80033c2:	4698      	mov	r8, r3
 80033c4:	46a1      	mov	r9, r4
 80033c6:	eb18 080a 	adds.w	r8, r8, sl
 80033ca:	eb49 090b 	adc.w	r9, r9, fp
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033e2:	4688      	mov	r8, r1
 80033e4:	4691      	mov	r9, r2
 80033e6:	eb1a 0508 	adds.w	r5, sl, r8
 80033ea:	eb4b 0609 	adc.w	r6, fp, r9
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f04f 0400 	mov.w	r4, #0
 8003400:	0094      	lsls	r4, r2, #2
 8003402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003406:	008b      	lsls	r3, r1, #2
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	4628      	mov	r0, r5
 800340e:	4631      	mov	r1, r6
 8003410:	f7fd fb94 	bl	8000b3c <__aeabi_uldivmod>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	461a      	mov	r2, r3
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <UART_SetConfig+0x6f4>)
 800341c:	fba3 2302 	umull	r2, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	469b      	mov	fp, r3
 800342a:	f04f 0c00 	mov.w	ip, #0
 800342e:	46d9      	mov	r9, fp
 8003430:	46e2      	mov	sl, ip
 8003432:	eb19 0309 	adds.w	r3, r9, r9
 8003436:	eb4a 040a 	adc.w	r4, sl, sl
 800343a:	4699      	mov	r9, r3
 800343c:	46a2      	mov	sl, r4
 800343e:	eb19 090b 	adds.w	r9, r9, fp
 8003442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800345a:	4689      	mov	r9, r1
 800345c:	4692      	mov	sl, r2
 800345e:	eb1b 0509 	adds.w	r5, fp, r9
 8003462:	eb4c 060a 	adc.w	r6, ip, sl
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0094      	lsls	r4, r2, #2
 800347a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	4628      	mov	r0, r5
 8003486:	4631      	mov	r1, r6
 8003488:	f7fd fb58 	bl	8000b3c <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b32      	ldr	r3, [pc, #200]	; (800355c <UART_SetConfig+0x6f4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <UART_SetConfig+0x6f4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b2:	4498      	add	r8, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	469b      	mov	fp, r3
 80034b8:	f04f 0c00 	mov.w	ip, #0
 80034bc:	46d9      	mov	r9, fp
 80034be:	46e2      	mov	sl, ip
 80034c0:	eb19 0309 	adds.w	r3, r9, r9
 80034c4:	eb4a 040a 	adc.w	r4, sl, sl
 80034c8:	4699      	mov	r9, r3
 80034ca:	46a2      	mov	sl, r4
 80034cc:	eb19 090b 	adds.w	r9, r9, fp
 80034d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e8:	4689      	mov	r9, r1
 80034ea:	4692      	mov	sl, r2
 80034ec:	eb1b 0509 	adds.w	r5, fp, r9
 80034f0:	eb4c 060a 	adc.w	r6, ip, sl
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f04f 0400 	mov.w	r4, #0
 8003506:	0094      	lsls	r4, r2, #2
 8003508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	461a      	mov	r2, r3
 8003510:	4623      	mov	r3, r4
 8003512:	4628      	mov	r0, r5
 8003514:	4631      	mov	r1, r6
 8003516:	f7fd fb11 	bl	8000b3c <__aeabi_uldivmod>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	461a      	mov	r2, r3
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <UART_SetConfig+0x6f4>)
 8003522:	fba3 1302 	umull	r1, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2164      	movs	r1, #100	; 0x64
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	; 0x32
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <UART_SetConfig+0x6f4>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4442      	add	r2, r8
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	e7ff      	b.n	800354a <UART_SetConfig+0x6e2>
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	51eb851f 	.word	0x51eb851f

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000010 	.word	0x20000010

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4e0d      	ldr	r6, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1ba4      	subs	r4, r4, r6
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2500      	movs	r5, #0
 8003578:	42a5      	cmp	r5, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4e0b      	ldr	r6, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 fc28 	bl	8003dd4 <_init>
 8003584:	1ba4      	subs	r4, r4, r6
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2500      	movs	r5, #0
 800358a:	42a5      	cmp	r5, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003594:	4798      	blx	r3
 8003596:	3501      	adds	r5, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800359e:	4798      	blx	r3
 80035a0:	3501      	adds	r5, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003fb8 	.word	0x08003fb8
 80035a8:	08003fb8 	.word	0x08003fb8
 80035ac:	08003fb8 	.word	0x08003fb8
 80035b0:	08003fbc 	.word	0x08003fbc

080035b4 <memcpy>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	1e43      	subs	r3, r0, #1
 80035b8:	440a      	add	r2, r1
 80035ba:	4291      	cmp	r1, r2
 80035bc:	d100      	bne.n	80035c0 <memcpy+0xc>
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035c8:	e7f7      	b.n	80035ba <memcpy+0x6>

080035ca <memset>:
 80035ca:	4402      	add	r2, r0
 80035cc:	4603      	mov	r3, r0
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d100      	bne.n	80035d4 <memset+0xa>
 80035d2:	4770      	bx	lr
 80035d4:	f803 1b01 	strb.w	r1, [r3], #1
 80035d8:	e7f9      	b.n	80035ce <memset+0x4>
	...

080035dc <siprintf>:
 80035dc:	b40e      	push	{r1, r2, r3}
 80035de:	b500      	push	{lr}
 80035e0:	b09c      	sub	sp, #112	; 0x70
 80035e2:	ab1d      	add	r3, sp, #116	; 0x74
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	9006      	str	r0, [sp, #24]
 80035e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035ec:	4809      	ldr	r0, [pc, #36]	; (8003614 <siprintf+0x38>)
 80035ee:	9107      	str	r1, [sp, #28]
 80035f0:	9104      	str	r1, [sp, #16]
 80035f2:	4909      	ldr	r1, [pc, #36]	; (8003618 <siprintf+0x3c>)
 80035f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80035f8:	9105      	str	r1, [sp, #20]
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	a902      	add	r1, sp, #8
 8003600:	f000 f866 	bl	80036d0 <_svfiprintf_r>
 8003604:	9b02      	ldr	r3, [sp, #8]
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	b01c      	add	sp, #112	; 0x70
 800360c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003610:	b003      	add	sp, #12
 8003612:	4770      	bx	lr
 8003614:	20000010 	.word	0x20000010
 8003618:	ffff0208 	.word	0xffff0208

0800361c <__ssputs_r>:
 800361c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	688e      	ldr	r6, [r1, #8]
 8003622:	429e      	cmp	r6, r3
 8003624:	4682      	mov	sl, r0
 8003626:	460c      	mov	r4, r1
 8003628:	4690      	mov	r8, r2
 800362a:	4699      	mov	r9, r3
 800362c:	d837      	bhi.n	800369e <__ssputs_r+0x82>
 800362e:	898a      	ldrh	r2, [r1, #12]
 8003630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003634:	d031      	beq.n	800369a <__ssputs_r+0x7e>
 8003636:	6825      	ldr	r5, [r4, #0]
 8003638:	6909      	ldr	r1, [r1, #16]
 800363a:	1a6f      	subs	r7, r5, r1
 800363c:	6965      	ldr	r5, [r4, #20]
 800363e:	2302      	movs	r3, #2
 8003640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003644:	fb95 f5f3 	sdiv	r5, r5, r3
 8003648:	f109 0301 	add.w	r3, r9, #1
 800364c:	443b      	add	r3, r7
 800364e:	429d      	cmp	r5, r3
 8003650:	bf38      	it	cc
 8003652:	461d      	movcc	r5, r3
 8003654:	0553      	lsls	r3, r2, #21
 8003656:	d530      	bpl.n	80036ba <__ssputs_r+0x9e>
 8003658:	4629      	mov	r1, r5
 800365a:	f000 fb21 	bl	8003ca0 <_malloc_r>
 800365e:	4606      	mov	r6, r0
 8003660:	b950      	cbnz	r0, 8003678 <__ssputs_r+0x5c>
 8003662:	230c      	movs	r3, #12
 8003664:	f8ca 3000 	str.w	r3, [sl]
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003678:	463a      	mov	r2, r7
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	f7ff ff9a 	bl	80035b4 <memcpy>
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	6126      	str	r6, [r4, #16]
 800368e:	6165      	str	r5, [r4, #20]
 8003690:	443e      	add	r6, r7
 8003692:	1bed      	subs	r5, r5, r7
 8003694:	6026      	str	r6, [r4, #0]
 8003696:	60a5      	str	r5, [r4, #8]
 8003698:	464e      	mov	r6, r9
 800369a:	454e      	cmp	r6, r9
 800369c:	d900      	bls.n	80036a0 <__ssputs_r+0x84>
 800369e:	464e      	mov	r6, r9
 80036a0:	4632      	mov	r2, r6
 80036a2:	4641      	mov	r1, r8
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	f000 fa93 	bl	8003bd0 <memmove>
 80036aa:	68a3      	ldr	r3, [r4, #8]
 80036ac:	1b9b      	subs	r3, r3, r6
 80036ae:	60a3      	str	r3, [r4, #8]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	441e      	add	r6, r3
 80036b4:	6026      	str	r6, [r4, #0]
 80036b6:	2000      	movs	r0, #0
 80036b8:	e7dc      	b.n	8003674 <__ssputs_r+0x58>
 80036ba:	462a      	mov	r2, r5
 80036bc:	f000 fb4a 	bl	8003d54 <_realloc_r>
 80036c0:	4606      	mov	r6, r0
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d1e2      	bne.n	800368c <__ssputs_r+0x70>
 80036c6:	6921      	ldr	r1, [r4, #16]
 80036c8:	4650      	mov	r0, sl
 80036ca:	f000 fa9b 	bl	8003c04 <_free_r>
 80036ce:	e7c8      	b.n	8003662 <__ssputs_r+0x46>

080036d0 <_svfiprintf_r>:
 80036d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	461d      	mov	r5, r3
 80036d6:	898b      	ldrh	r3, [r1, #12]
 80036d8:	061f      	lsls	r7, r3, #24
 80036da:	b09d      	sub	sp, #116	; 0x74
 80036dc:	4680      	mov	r8, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4616      	mov	r6, r2
 80036e2:	d50f      	bpl.n	8003704 <_svfiprintf_r+0x34>
 80036e4:	690b      	ldr	r3, [r1, #16]
 80036e6:	b96b      	cbnz	r3, 8003704 <_svfiprintf_r+0x34>
 80036e8:	2140      	movs	r1, #64	; 0x40
 80036ea:	f000 fad9 	bl	8003ca0 <_malloc_r>
 80036ee:	6020      	str	r0, [r4, #0]
 80036f0:	6120      	str	r0, [r4, #16]
 80036f2:	b928      	cbnz	r0, 8003700 <_svfiprintf_r+0x30>
 80036f4:	230c      	movs	r3, #12
 80036f6:	f8c8 3000 	str.w	r3, [r8]
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	e0c8      	b.n	8003892 <_svfiprintf_r+0x1c2>
 8003700:	2340      	movs	r3, #64	; 0x40
 8003702:	6163      	str	r3, [r4, #20]
 8003704:	2300      	movs	r3, #0
 8003706:	9309      	str	r3, [sp, #36]	; 0x24
 8003708:	2320      	movs	r3, #32
 800370a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800370e:	2330      	movs	r3, #48	; 0x30
 8003710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003714:	9503      	str	r5, [sp, #12]
 8003716:	f04f 0b01 	mov.w	fp, #1
 800371a:	4637      	mov	r7, r6
 800371c:	463d      	mov	r5, r7
 800371e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003722:	b10b      	cbz	r3, 8003728 <_svfiprintf_r+0x58>
 8003724:	2b25      	cmp	r3, #37	; 0x25
 8003726:	d13e      	bne.n	80037a6 <_svfiprintf_r+0xd6>
 8003728:	ebb7 0a06 	subs.w	sl, r7, r6
 800372c:	d00b      	beq.n	8003746 <_svfiprintf_r+0x76>
 800372e:	4653      	mov	r3, sl
 8003730:	4632      	mov	r2, r6
 8003732:	4621      	mov	r1, r4
 8003734:	4640      	mov	r0, r8
 8003736:	f7ff ff71 	bl	800361c <__ssputs_r>
 800373a:	3001      	adds	r0, #1
 800373c:	f000 80a4 	beq.w	8003888 <_svfiprintf_r+0x1b8>
 8003740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003742:	4453      	add	r3, sl
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
 8003746:	783b      	ldrb	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 809d 	beq.w	8003888 <_svfiprintf_r+0x1b8>
 800374e:	2300      	movs	r3, #0
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003758:	9304      	str	r3, [sp, #16]
 800375a:	9307      	str	r3, [sp, #28]
 800375c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003760:	931a      	str	r3, [sp, #104]	; 0x68
 8003762:	462f      	mov	r7, r5
 8003764:	2205      	movs	r2, #5
 8003766:	f817 1b01 	ldrb.w	r1, [r7], #1
 800376a:	4850      	ldr	r0, [pc, #320]	; (80038ac <_svfiprintf_r+0x1dc>)
 800376c:	f7fc fd40 	bl	80001f0 <memchr>
 8003770:	9b04      	ldr	r3, [sp, #16]
 8003772:	b9d0      	cbnz	r0, 80037aa <_svfiprintf_r+0xda>
 8003774:	06d9      	lsls	r1, r3, #27
 8003776:	bf44      	itt	mi
 8003778:	2220      	movmi	r2, #32
 800377a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800377e:	071a      	lsls	r2, r3, #28
 8003780:	bf44      	itt	mi
 8003782:	222b      	movmi	r2, #43	; 0x2b
 8003784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003788:	782a      	ldrb	r2, [r5, #0]
 800378a:	2a2a      	cmp	r2, #42	; 0x2a
 800378c:	d015      	beq.n	80037ba <_svfiprintf_r+0xea>
 800378e:	9a07      	ldr	r2, [sp, #28]
 8003790:	462f      	mov	r7, r5
 8003792:	2000      	movs	r0, #0
 8003794:	250a      	movs	r5, #10
 8003796:	4639      	mov	r1, r7
 8003798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800379c:	3b30      	subs	r3, #48	; 0x30
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d94d      	bls.n	800383e <_svfiprintf_r+0x16e>
 80037a2:	b1b8      	cbz	r0, 80037d4 <_svfiprintf_r+0x104>
 80037a4:	e00f      	b.n	80037c6 <_svfiprintf_r+0xf6>
 80037a6:	462f      	mov	r7, r5
 80037a8:	e7b8      	b.n	800371c <_svfiprintf_r+0x4c>
 80037aa:	4a40      	ldr	r2, [pc, #256]	; (80038ac <_svfiprintf_r+0x1dc>)
 80037ac:	1a80      	subs	r0, r0, r2
 80037ae:	fa0b f000 	lsl.w	r0, fp, r0
 80037b2:	4318      	orrs	r0, r3
 80037b4:	9004      	str	r0, [sp, #16]
 80037b6:	463d      	mov	r5, r7
 80037b8:	e7d3      	b.n	8003762 <_svfiprintf_r+0x92>
 80037ba:	9a03      	ldr	r2, [sp, #12]
 80037bc:	1d11      	adds	r1, r2, #4
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	9103      	str	r1, [sp, #12]
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	db01      	blt.n	80037ca <_svfiprintf_r+0xfa>
 80037c6:	9207      	str	r2, [sp, #28]
 80037c8:	e004      	b.n	80037d4 <_svfiprintf_r+0x104>
 80037ca:	4252      	negs	r2, r2
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	9207      	str	r2, [sp, #28]
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	783b      	ldrb	r3, [r7, #0]
 80037d6:	2b2e      	cmp	r3, #46	; 0x2e
 80037d8:	d10c      	bne.n	80037f4 <_svfiprintf_r+0x124>
 80037da:	787b      	ldrb	r3, [r7, #1]
 80037dc:	2b2a      	cmp	r3, #42	; 0x2a
 80037de:	d133      	bne.n	8003848 <_svfiprintf_r+0x178>
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	9203      	str	r2, [sp, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bfb8      	it	lt
 80037ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80037f0:	3702      	adds	r7, #2
 80037f2:	9305      	str	r3, [sp, #20]
 80037f4:	4d2e      	ldr	r5, [pc, #184]	; (80038b0 <_svfiprintf_r+0x1e0>)
 80037f6:	7839      	ldrb	r1, [r7, #0]
 80037f8:	2203      	movs	r2, #3
 80037fa:	4628      	mov	r0, r5
 80037fc:	f7fc fcf8 	bl	80001f0 <memchr>
 8003800:	b138      	cbz	r0, 8003812 <_svfiprintf_r+0x142>
 8003802:	2340      	movs	r3, #64	; 0x40
 8003804:	1b40      	subs	r0, r0, r5
 8003806:	fa03 f000 	lsl.w	r0, r3, r0
 800380a:	9b04      	ldr	r3, [sp, #16]
 800380c:	4303      	orrs	r3, r0
 800380e:	3701      	adds	r7, #1
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	7839      	ldrb	r1, [r7, #0]
 8003814:	4827      	ldr	r0, [pc, #156]	; (80038b4 <_svfiprintf_r+0x1e4>)
 8003816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800381a:	2206      	movs	r2, #6
 800381c:	1c7e      	adds	r6, r7, #1
 800381e:	f7fc fce7 	bl	80001f0 <memchr>
 8003822:	2800      	cmp	r0, #0
 8003824:	d038      	beq.n	8003898 <_svfiprintf_r+0x1c8>
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <_svfiprintf_r+0x1e8>)
 8003828:	bb13      	cbnz	r3, 8003870 <_svfiprintf_r+0x1a0>
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	3307      	adds	r3, #7
 800382e:	f023 0307 	bic.w	r3, r3, #7
 8003832:	3308      	adds	r3, #8
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003838:	444b      	add	r3, r9
 800383a:	9309      	str	r3, [sp, #36]	; 0x24
 800383c:	e76d      	b.n	800371a <_svfiprintf_r+0x4a>
 800383e:	fb05 3202 	mla	r2, r5, r2, r3
 8003842:	2001      	movs	r0, #1
 8003844:	460f      	mov	r7, r1
 8003846:	e7a6      	b.n	8003796 <_svfiprintf_r+0xc6>
 8003848:	2300      	movs	r3, #0
 800384a:	3701      	adds	r7, #1
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4619      	mov	r1, r3
 8003850:	250a      	movs	r5, #10
 8003852:	4638      	mov	r0, r7
 8003854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003858:	3a30      	subs	r2, #48	; 0x30
 800385a:	2a09      	cmp	r2, #9
 800385c:	d903      	bls.n	8003866 <_svfiprintf_r+0x196>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c8      	beq.n	80037f4 <_svfiprintf_r+0x124>
 8003862:	9105      	str	r1, [sp, #20]
 8003864:	e7c6      	b.n	80037f4 <_svfiprintf_r+0x124>
 8003866:	fb05 2101 	mla	r1, r5, r1, r2
 800386a:	2301      	movs	r3, #1
 800386c:	4607      	mov	r7, r0
 800386e:	e7f0      	b.n	8003852 <_svfiprintf_r+0x182>
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4622      	mov	r2, r4
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <_svfiprintf_r+0x1ec>)
 8003878:	a904      	add	r1, sp, #16
 800387a:	4640      	mov	r0, r8
 800387c:	f3af 8000 	nop.w
 8003880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003884:	4681      	mov	r9, r0
 8003886:	d1d6      	bne.n	8003836 <_svfiprintf_r+0x166>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	065b      	lsls	r3, r3, #25
 800388c:	f53f af35 	bmi.w	80036fa <_svfiprintf_r+0x2a>
 8003890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003892:	b01d      	add	sp, #116	; 0x74
 8003894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003898:	ab03      	add	r3, sp, #12
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4622      	mov	r2, r4
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <_svfiprintf_r+0x1ec>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	4640      	mov	r0, r8
 80038a4:	f000 f882 	bl	80039ac <_printf_i>
 80038a8:	e7ea      	b.n	8003880 <_svfiprintf_r+0x1b0>
 80038aa:	bf00      	nop
 80038ac:	08003f7c 	.word	0x08003f7c
 80038b0:	08003f82 	.word	0x08003f82
 80038b4:	08003f86 	.word	0x08003f86
 80038b8:	00000000 	.word	0x00000000
 80038bc:	0800361d 	.word	0x0800361d

080038c0 <_printf_common>:
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	4691      	mov	r9, r2
 80038c6:	461f      	mov	r7, r3
 80038c8:	688a      	ldr	r2, [r1, #8]
 80038ca:	690b      	ldr	r3, [r1, #16]
 80038cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bfb8      	it	lt
 80038d4:	4613      	movlt	r3, r2
 80038d6:	f8c9 3000 	str.w	r3, [r9]
 80038da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038de:	4606      	mov	r6, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	b112      	cbz	r2, 80038ea <_printf_common+0x2a>
 80038e4:	3301      	adds	r3, #1
 80038e6:	f8c9 3000 	str.w	r3, [r9]
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	0699      	lsls	r1, r3, #26
 80038ee:	bf42      	ittt	mi
 80038f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038f4:	3302      	addmi	r3, #2
 80038f6:	f8c9 3000 	strmi.w	r3, [r9]
 80038fa:	6825      	ldr	r5, [r4, #0]
 80038fc:	f015 0506 	ands.w	r5, r5, #6
 8003900:	d107      	bne.n	8003912 <_printf_common+0x52>
 8003902:	f104 0a19 	add.w	sl, r4, #25
 8003906:	68e3      	ldr	r3, [r4, #12]
 8003908:	f8d9 2000 	ldr.w	r2, [r9]
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	42ab      	cmp	r3, r5
 8003910:	dc28      	bgt.n	8003964 <_printf_common+0xa4>
 8003912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	3300      	adds	r3, #0
 800391a:	bf18      	it	ne
 800391c:	2301      	movne	r3, #1
 800391e:	0692      	lsls	r2, r2, #26
 8003920:	d42d      	bmi.n	800397e <_printf_common+0xbe>
 8003922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003926:	4639      	mov	r1, r7
 8003928:	4630      	mov	r0, r6
 800392a:	47c0      	blx	r8
 800392c:	3001      	adds	r0, #1
 800392e:	d020      	beq.n	8003972 <_printf_common+0xb2>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	68e5      	ldr	r5, [r4, #12]
 8003934:	f8d9 2000 	ldr.w	r2, [r9]
 8003938:	f003 0306 	and.w	r3, r3, #6
 800393c:	2b04      	cmp	r3, #4
 800393e:	bf08      	it	eq
 8003940:	1aad      	subeq	r5, r5, r2
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	bf0c      	ite	eq
 8003948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800394c:	2500      	movne	r5, #0
 800394e:	4293      	cmp	r3, r2
 8003950:	bfc4      	itt	gt
 8003952:	1a9b      	subgt	r3, r3, r2
 8003954:	18ed      	addgt	r5, r5, r3
 8003956:	f04f 0900 	mov.w	r9, #0
 800395a:	341a      	adds	r4, #26
 800395c:	454d      	cmp	r5, r9
 800395e:	d11a      	bne.n	8003996 <_printf_common+0xd6>
 8003960:	2000      	movs	r0, #0
 8003962:	e008      	b.n	8003976 <_printf_common+0xb6>
 8003964:	2301      	movs	r3, #1
 8003966:	4652      	mov	r2, sl
 8003968:	4639      	mov	r1, r7
 800396a:	4630      	mov	r0, r6
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d103      	bne.n	800397a <_printf_common+0xba>
 8003972:	f04f 30ff 	mov.w	r0, #4294967295
 8003976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397a:	3501      	adds	r5, #1
 800397c:	e7c3      	b.n	8003906 <_printf_common+0x46>
 800397e:	18e1      	adds	r1, r4, r3
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	2030      	movs	r0, #48	; 0x30
 8003984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003988:	4422      	add	r2, r4
 800398a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800398e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003992:	3302      	adds	r3, #2
 8003994:	e7c5      	b.n	8003922 <_printf_common+0x62>
 8003996:	2301      	movs	r3, #1
 8003998:	4622      	mov	r2, r4
 800399a:	4639      	mov	r1, r7
 800399c:	4630      	mov	r0, r6
 800399e:	47c0      	blx	r8
 80039a0:	3001      	adds	r0, #1
 80039a2:	d0e6      	beq.n	8003972 <_printf_common+0xb2>
 80039a4:	f109 0901 	add.w	r9, r9, #1
 80039a8:	e7d8      	b.n	800395c <_printf_common+0x9c>
	...

080039ac <_printf_i>:
 80039ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80039b4:	460c      	mov	r4, r1
 80039b6:	7e09      	ldrb	r1, [r1, #24]
 80039b8:	b085      	sub	sp, #20
 80039ba:	296e      	cmp	r1, #110	; 0x6e
 80039bc:	4617      	mov	r7, r2
 80039be:	4606      	mov	r6, r0
 80039c0:	4698      	mov	r8, r3
 80039c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039c4:	f000 80b3 	beq.w	8003b2e <_printf_i+0x182>
 80039c8:	d822      	bhi.n	8003a10 <_printf_i+0x64>
 80039ca:	2963      	cmp	r1, #99	; 0x63
 80039cc:	d036      	beq.n	8003a3c <_printf_i+0x90>
 80039ce:	d80a      	bhi.n	80039e6 <_printf_i+0x3a>
 80039d0:	2900      	cmp	r1, #0
 80039d2:	f000 80b9 	beq.w	8003b48 <_printf_i+0x19c>
 80039d6:	2958      	cmp	r1, #88	; 0x58
 80039d8:	f000 8083 	beq.w	8003ae2 <_printf_i+0x136>
 80039dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039e4:	e032      	b.n	8003a4c <_printf_i+0xa0>
 80039e6:	2964      	cmp	r1, #100	; 0x64
 80039e8:	d001      	beq.n	80039ee <_printf_i+0x42>
 80039ea:	2969      	cmp	r1, #105	; 0x69
 80039ec:	d1f6      	bne.n	80039dc <_printf_i+0x30>
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	0605      	lsls	r5, r0, #24
 80039f4:	f103 0104 	add.w	r1, r3, #4
 80039f8:	d52a      	bpl.n	8003a50 <_printf_i+0xa4>
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da03      	bge.n	8003a0a <_printf_i+0x5e>
 8003a02:	222d      	movs	r2, #45	; 0x2d
 8003a04:	425b      	negs	r3, r3
 8003a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a0a:	486f      	ldr	r0, [pc, #444]	; (8003bc8 <_printf_i+0x21c>)
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	e039      	b.n	8003a84 <_printf_i+0xd8>
 8003a10:	2973      	cmp	r1, #115	; 0x73
 8003a12:	f000 809d 	beq.w	8003b50 <_printf_i+0x1a4>
 8003a16:	d808      	bhi.n	8003a2a <_printf_i+0x7e>
 8003a18:	296f      	cmp	r1, #111	; 0x6f
 8003a1a:	d020      	beq.n	8003a5e <_printf_i+0xb2>
 8003a1c:	2970      	cmp	r1, #112	; 0x70
 8003a1e:	d1dd      	bne.n	80039dc <_printf_i+0x30>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	e003      	b.n	8003a32 <_printf_i+0x86>
 8003a2a:	2975      	cmp	r1, #117	; 0x75
 8003a2c:	d017      	beq.n	8003a5e <_printf_i+0xb2>
 8003a2e:	2978      	cmp	r1, #120	; 0x78
 8003a30:	d1d4      	bne.n	80039dc <_printf_i+0x30>
 8003a32:	2378      	movs	r3, #120	; 0x78
 8003a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a38:	4864      	ldr	r0, [pc, #400]	; (8003bcc <_printf_i+0x220>)
 8003a3a:	e055      	b.n	8003ae8 <_printf_i+0x13c>
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	1d19      	adds	r1, r3, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6011      	str	r1, [r2, #0]
 8003a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e08c      	b.n	8003b6a <_printf_i+0x1be>
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6011      	str	r1, [r2, #0]
 8003a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a58:	bf18      	it	ne
 8003a5a:	b21b      	sxthne	r3, r3
 8003a5c:	e7cf      	b.n	80039fe <_printf_i+0x52>
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	6825      	ldr	r5, [r4, #0]
 8003a62:	1d18      	adds	r0, r3, #4
 8003a64:	6010      	str	r0, [r2, #0]
 8003a66:	0628      	lsls	r0, r5, #24
 8003a68:	d501      	bpl.n	8003a6e <_printf_i+0xc2>
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	e002      	b.n	8003a74 <_printf_i+0xc8>
 8003a6e:	0668      	lsls	r0, r5, #25
 8003a70:	d5fb      	bpl.n	8003a6a <_printf_i+0xbe>
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	4854      	ldr	r0, [pc, #336]	; (8003bc8 <_printf_i+0x21c>)
 8003a76:	296f      	cmp	r1, #111	; 0x6f
 8003a78:	bf14      	ite	ne
 8003a7a:	220a      	movne	r2, #10
 8003a7c:	2208      	moveq	r2, #8
 8003a7e:	2100      	movs	r1, #0
 8003a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a84:	6865      	ldr	r5, [r4, #4]
 8003a86:	60a5      	str	r5, [r4, #8]
 8003a88:	2d00      	cmp	r5, #0
 8003a8a:	f2c0 8095 	blt.w	8003bb8 <_printf_i+0x20c>
 8003a8e:	6821      	ldr	r1, [r4, #0]
 8003a90:	f021 0104 	bic.w	r1, r1, #4
 8003a94:	6021      	str	r1, [r4, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d13d      	bne.n	8003b16 <_printf_i+0x16a>
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	f040 808e 	bne.w	8003bbc <_printf_i+0x210>
 8003aa0:	4665      	mov	r5, ip
 8003aa2:	2a08      	cmp	r2, #8
 8003aa4:	d10b      	bne.n	8003abe <_printf_i+0x112>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	07db      	lsls	r3, r3, #31
 8003aaa:	d508      	bpl.n	8003abe <_printf_i+0x112>
 8003aac:	6923      	ldr	r3, [r4, #16]
 8003aae:	6862      	ldr	r2, [r4, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bfde      	ittt	le
 8003ab4:	2330      	movle	r3, #48	; 0x30
 8003ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003abe:	ebac 0305 	sub.w	r3, ip, r5
 8003ac2:	6123      	str	r3, [r4, #16]
 8003ac4:	f8cd 8000 	str.w	r8, [sp]
 8003ac8:	463b      	mov	r3, r7
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	4621      	mov	r1, r4
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7ff fef6 	bl	80038c0 <_printf_common>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d14d      	bne.n	8003b74 <_printf_i+0x1c8>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	b005      	add	sp, #20
 8003ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ae2:	4839      	ldr	r0, [pc, #228]	; (8003bc8 <_printf_i+0x21c>)
 8003ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ae8:	6813      	ldr	r3, [r2, #0]
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	1d1d      	adds	r5, r3, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6015      	str	r5, [r2, #0]
 8003af2:	060a      	lsls	r2, r1, #24
 8003af4:	d50b      	bpl.n	8003b0e <_printf_i+0x162>
 8003af6:	07ca      	lsls	r2, r1, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f041 0120 	orrmi.w	r1, r1, #32
 8003afe:	6021      	strmi	r1, [r4, #0]
 8003b00:	b91b      	cbnz	r3, 8003b0a <_printf_i+0x15e>
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	f022 0220 	bic.w	r2, r2, #32
 8003b08:	6022      	str	r2, [r4, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	e7b7      	b.n	8003a7e <_printf_i+0xd2>
 8003b0e:	064d      	lsls	r5, r1, #25
 8003b10:	bf48      	it	mi
 8003b12:	b29b      	uxthmi	r3, r3
 8003b14:	e7ef      	b.n	8003af6 <_printf_i+0x14a>
 8003b16:	4665      	mov	r5, ip
 8003b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8003b20:	5cc3      	ldrb	r3, [r0, r3]
 8003b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b26:	460b      	mov	r3, r1
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	d1f5      	bne.n	8003b18 <_printf_i+0x16c>
 8003b2c:	e7b9      	b.n	8003aa2 <_printf_i+0xf6>
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	6825      	ldr	r5, [r4, #0]
 8003b32:	6961      	ldr	r1, [r4, #20]
 8003b34:	1d18      	adds	r0, r3, #4
 8003b36:	6010      	str	r0, [r2, #0]
 8003b38:	0628      	lsls	r0, r5, #24
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	d501      	bpl.n	8003b42 <_printf_i+0x196>
 8003b3e:	6019      	str	r1, [r3, #0]
 8003b40:	e002      	b.n	8003b48 <_printf_i+0x19c>
 8003b42:	066a      	lsls	r2, r5, #25
 8003b44:	d5fb      	bpl.n	8003b3e <_printf_i+0x192>
 8003b46:	8019      	strh	r1, [r3, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	4665      	mov	r5, ip
 8003b4e:	e7b9      	b.n	8003ac4 <_printf_i+0x118>
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	1d19      	adds	r1, r3, #4
 8003b54:	6011      	str	r1, [r2, #0]
 8003b56:	681d      	ldr	r5, [r3, #0]
 8003b58:	6862      	ldr	r2, [r4, #4]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f7fc fb47 	bl	80001f0 <memchr>
 8003b62:	b108      	cbz	r0, 8003b68 <_printf_i+0x1bc>
 8003b64:	1b40      	subs	r0, r0, r5
 8003b66:	6060      	str	r0, [r4, #4]
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	6123      	str	r3, [r4, #16]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b72:	e7a7      	b.n	8003ac4 <_printf_i+0x118>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	462a      	mov	r2, r5
 8003b78:	4639      	mov	r1, r7
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d0aa      	beq.n	8003ad8 <_printf_i+0x12c>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	079b      	lsls	r3, r3, #30
 8003b86:	d413      	bmi.n	8003bb0 <_printf_i+0x204>
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	4298      	cmp	r0, r3
 8003b8e:	bfb8      	it	lt
 8003b90:	4618      	movlt	r0, r3
 8003b92:	e7a3      	b.n	8003adc <_printf_i+0x130>
 8003b94:	2301      	movs	r3, #1
 8003b96:	464a      	mov	r2, r9
 8003b98:	4639      	mov	r1, r7
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	47c0      	blx	r8
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d09a      	beq.n	8003ad8 <_printf_i+0x12c>
 8003ba2:	3501      	adds	r5, #1
 8003ba4:	68e3      	ldr	r3, [r4, #12]
 8003ba6:	9a03      	ldr	r2, [sp, #12]
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	42ab      	cmp	r3, r5
 8003bac:	dcf2      	bgt.n	8003b94 <_printf_i+0x1e8>
 8003bae:	e7eb      	b.n	8003b88 <_printf_i+0x1dc>
 8003bb0:	2500      	movs	r5, #0
 8003bb2:	f104 0919 	add.w	r9, r4, #25
 8003bb6:	e7f5      	b.n	8003ba4 <_printf_i+0x1f8>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ac      	bne.n	8003b16 <_printf_i+0x16a>
 8003bbc:	7803      	ldrb	r3, [r0, #0]
 8003bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc6:	e76c      	b.n	8003aa2 <_printf_i+0xf6>
 8003bc8:	08003f8d 	.word	0x08003f8d
 8003bcc:	08003f9e 	.word	0x08003f9e

08003bd0 <memmove>:
 8003bd0:	4288      	cmp	r0, r1
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	eb01 0302 	add.w	r3, r1, r2
 8003bd8:	d807      	bhi.n	8003bea <memmove+0x1a>
 8003bda:	1e42      	subs	r2, r0, #1
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	d00a      	beq.n	8003bf6 <memmove+0x26>
 8003be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003be4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003be8:	e7f8      	b.n	8003bdc <memmove+0xc>
 8003bea:	4283      	cmp	r3, r0
 8003bec:	d9f5      	bls.n	8003bda <memmove+0xa>
 8003bee:	1881      	adds	r1, r0, r2
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	42d3      	cmn	r3, r2
 8003bf4:	d100      	bne.n	8003bf8 <memmove+0x28>
 8003bf6:	bd10      	pop	{r4, pc}
 8003bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c00:	e7f7      	b.n	8003bf2 <memmove+0x22>
	...

08003c04 <_free_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4605      	mov	r5, r0
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	d045      	beq.n	8003c98 <_free_r+0x94>
 8003c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c10:	1f0c      	subs	r4, r1, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfb8      	it	lt
 8003c16:	18e4      	addlt	r4, r4, r3
 8003c18:	f000 f8d2 	bl	8003dc0 <__malloc_lock>
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <_free_r+0x98>)
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	4610      	mov	r0, r2
 8003c22:	b933      	cbnz	r3, 8003c32 <_free_r+0x2e>
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	6014      	str	r4, [r2, #0]
 8003c28:	4628      	mov	r0, r5
 8003c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c2e:	f000 b8c8 	b.w	8003dc2 <__malloc_unlock>
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	d90c      	bls.n	8003c50 <_free_r+0x4c>
 8003c36:	6821      	ldr	r1, [r4, #0]
 8003c38:	1862      	adds	r2, r4, r1
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	bf04      	itt	eq
 8003c3e:	681a      	ldreq	r2, [r3, #0]
 8003c40:	685b      	ldreq	r3, [r3, #4]
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	bf04      	itt	eq
 8003c46:	1852      	addeq	r2, r2, r1
 8003c48:	6022      	streq	r2, [r4, #0]
 8003c4a:	6004      	str	r4, [r0, #0]
 8003c4c:	e7ec      	b.n	8003c28 <_free_r+0x24>
 8003c4e:	4613      	mov	r3, r2
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	b10a      	cbz	r2, 8003c58 <_free_r+0x54>
 8003c54:	42a2      	cmp	r2, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x4a>
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	1858      	adds	r0, r3, r1
 8003c5c:	42a0      	cmp	r0, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x74>
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	4401      	add	r1, r0
 8003c64:	1858      	adds	r0, r3, r1
 8003c66:	4282      	cmp	r2, r0
 8003c68:	6019      	str	r1, [r3, #0]
 8003c6a:	d1dd      	bne.n	8003c28 <_free_r+0x24>
 8003c6c:	6810      	ldr	r0, [r2, #0]
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	4401      	add	r1, r0
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	e7d7      	b.n	8003c28 <_free_r+0x24>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x7c>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	e7d3      	b.n	8003c28 <_free_r+0x24>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	1821      	adds	r1, r4, r0
 8003c84:	428a      	cmp	r2, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6811      	ldreq	r1, [r2, #0]
 8003c8a:	6852      	ldreq	r2, [r2, #4]
 8003c8c:	6062      	str	r2, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1809      	addeq	r1, r1, r0
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	605c      	str	r4, [r3, #4]
 8003c96:	e7c7      	b.n	8003c28 <_free_r+0x24>
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000100 	.word	0x20000100

08003ca0 <_malloc_r>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	1ccd      	adds	r5, r1, #3
 8003ca4:	f025 0503 	bic.w	r5, r5, #3
 8003ca8:	3508      	adds	r5, #8
 8003caa:	2d0c      	cmp	r5, #12
 8003cac:	bf38      	it	cc
 8003cae:	250c      	movcc	r5, #12
 8003cb0:	2d00      	cmp	r5, #0
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	db01      	blt.n	8003cba <_malloc_r+0x1a>
 8003cb6:	42a9      	cmp	r1, r5
 8003cb8:	d903      	bls.n	8003cc2 <_malloc_r+0x22>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
 8003cc2:	f000 f87d 	bl	8003dc0 <__malloc_lock>
 8003cc6:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <_malloc_r+0xac>)
 8003cc8:	6814      	ldr	r4, [r2, #0]
 8003cca:	4621      	mov	r1, r4
 8003ccc:	b991      	cbnz	r1, 8003cf4 <_malloc_r+0x54>
 8003cce:	4c20      	ldr	r4, [pc, #128]	; (8003d50 <_malloc_r+0xb0>)
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	b91b      	cbnz	r3, 8003cdc <_malloc_r+0x3c>
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f863 	bl	8003da0 <_sbrk_r>
 8003cda:	6020      	str	r0, [r4, #0]
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f85e 	bl	8003da0 <_sbrk_r>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d124      	bne.n	8003d32 <_malloc_r+0x92>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	4630      	mov	r0, r6
 8003cee:	f000 f868 	bl	8003dc2 <__malloc_unlock>
 8003cf2:	e7e4      	b.n	8003cbe <_malloc_r+0x1e>
 8003cf4:	680b      	ldr	r3, [r1, #0]
 8003cf6:	1b5b      	subs	r3, r3, r5
 8003cf8:	d418      	bmi.n	8003d2c <_malloc_r+0x8c>
 8003cfa:	2b0b      	cmp	r3, #11
 8003cfc:	d90f      	bls.n	8003d1e <_malloc_r+0x7e>
 8003cfe:	600b      	str	r3, [r1, #0]
 8003d00:	50cd      	str	r5, [r1, r3]
 8003d02:	18cc      	adds	r4, r1, r3
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f85c 	bl	8003dc2 <__malloc_unlock>
 8003d0a:	f104 000b 	add.w	r0, r4, #11
 8003d0e:	1d23      	adds	r3, r4, #4
 8003d10:	f020 0007 	bic.w	r0, r0, #7
 8003d14:	1ac3      	subs	r3, r0, r3
 8003d16:	d0d3      	beq.n	8003cc0 <_malloc_r+0x20>
 8003d18:	425a      	negs	r2, r3
 8003d1a:	50e2      	str	r2, [r4, r3]
 8003d1c:	e7d0      	b.n	8003cc0 <_malloc_r+0x20>
 8003d1e:	428c      	cmp	r4, r1
 8003d20:	684b      	ldr	r3, [r1, #4]
 8003d22:	bf16      	itet	ne
 8003d24:	6063      	strne	r3, [r4, #4]
 8003d26:	6013      	streq	r3, [r2, #0]
 8003d28:	460c      	movne	r4, r1
 8003d2a:	e7eb      	b.n	8003d04 <_malloc_r+0x64>
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	6849      	ldr	r1, [r1, #4]
 8003d30:	e7cc      	b.n	8003ccc <_malloc_r+0x2c>
 8003d32:	1cc4      	adds	r4, r0, #3
 8003d34:	f024 0403 	bic.w	r4, r4, #3
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d005      	beq.n	8003d48 <_malloc_r+0xa8>
 8003d3c:	1a21      	subs	r1, r4, r0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 f82e 	bl	8003da0 <_sbrk_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0cf      	beq.n	8003ce8 <_malloc_r+0x48>
 8003d48:	6025      	str	r5, [r4, #0]
 8003d4a:	e7db      	b.n	8003d04 <_malloc_r+0x64>
 8003d4c:	20000100 	.word	0x20000100
 8003d50:	20000104 	.word	0x20000104

08003d54 <_realloc_r>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	4607      	mov	r7, r0
 8003d58:	4614      	mov	r4, r2
 8003d5a:	460e      	mov	r6, r1
 8003d5c:	b921      	cbnz	r1, 8003d68 <_realloc_r+0x14>
 8003d5e:	4611      	mov	r1, r2
 8003d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d64:	f7ff bf9c 	b.w	8003ca0 <_malloc_r>
 8003d68:	b922      	cbnz	r2, 8003d74 <_realloc_r+0x20>
 8003d6a:	f7ff ff4b 	bl	8003c04 <_free_r>
 8003d6e:	4625      	mov	r5, r4
 8003d70:	4628      	mov	r0, r5
 8003d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d74:	f000 f826 	bl	8003dc4 <_malloc_usable_size_r>
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d20f      	bcs.n	8003d9c <_realloc_r+0x48>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f7ff ff8e 	bl	8003ca0 <_malloc_r>
 8003d84:	4605      	mov	r5, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d0f2      	beq.n	8003d70 <_realloc_r+0x1c>
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	f7ff fc11 	bl	80035b4 <memcpy>
 8003d92:	4631      	mov	r1, r6
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7ff ff35 	bl	8003c04 <_free_r>
 8003d9a:	e7e9      	b.n	8003d70 <_realloc_r+0x1c>
 8003d9c:	4635      	mov	r5, r6
 8003d9e:	e7e7      	b.n	8003d70 <_realloc_r+0x1c>

08003da0 <_sbrk_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4c06      	ldr	r4, [pc, #24]	; (8003dbc <_sbrk_r+0x1c>)
 8003da4:	2300      	movs	r3, #0
 8003da6:	4605      	mov	r5, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	f7fd fc54 	bl	8001658 <_sbrk>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_sbrk_r+0x1a>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_sbrk_r+0x1a>
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	2000014c 	.word	0x2000014c

08003dc0 <__malloc_lock>:
 8003dc0:	4770      	bx	lr

08003dc2 <__malloc_unlock>:
 8003dc2:	4770      	bx	lr

08003dc4 <_malloc_usable_size_r>:
 8003dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc8:	1f18      	subs	r0, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bfbc      	itt	lt
 8003dce:	580b      	ldrlt	r3, [r1, r0]
 8003dd0:	18c0      	addlt	r0, r0, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
